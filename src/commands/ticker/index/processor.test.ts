import { ButtonInteraction, Message } from "discord.js"
import mockdc from "../../../../tests/mocks/discord"
import CacheManager from "cache/node-cache"
import * as processor from "./processor"
import { APIError } from "errors"
import { defaultEmojis, getEmoji } from "utils/common"
jest.mock("cache/node-cache")

const blank = getEmoji("blank")
const uptrend = defaultEmojis.CHART_WITH_UPWARDS_TREND

describe("composeTickerResponse", () => {
  // const chartData = JSON.parse(
  //   `{"timestamps":null,"prices":[0.017738036010996952,0.017153859942293636,0.01699636780266111,0.017003055634182956,0.01699732882199778,0.016974919657075295,0.016997934341416485,0.01692182694953221,0.017106378367753562,0.017024141570613566,0.017057422859594645,0.01705906618381562,0.01751724594432183,0.01748833246178098,0.017530983133056222,0.017461479821531484,0.017512110378762265,0.017513852452110214,0.016950208584224972,0.017076839501426515,0.017154698195671173,0.01778643676080134,0.017787875154937106,0.017257318408350295,0.017252144598577858,0.017786369818813,0.0178402440971742,0.017784796544931102,0.01770845794991813,0.017488529880631248,0.01764195437390607,0.01754139345116088,0.01758789250608442,0.01753375492972874,0.018229243366009337,0.01826540859067296,0.018309529292306895,0.018348133137105718,0.018148094284342834,0.018114725092539807,0.01817389000134149,0.018367576796199003,0.018451340908031924,0.01888213949151858,0.018792908036442475,0.018517165624355,0.018362926202579333,0.017885598141030825,0.017922945993821892,0.018392355154693837,0.018218191587960272,0.018126225159154994,0.018246158132928084,0.01827291207265813,0.01826412845182959,0.018795038796280902,0.01884044203075376,0.018950457144042403,0.019067451956139077,0.021273526105891952,0.019947358051633994,0.020013644725840003,0.019846725783428665,0.019667783692149207,0.02081317438968598,0.02070341197152823,0.020640856709095674,0.020239883062447006,0.020399207682181852,0.02048634886046042,0.020173429400682407,0.020397301774919427,0.020362781022375306,0.020800881115793094,0.02083228481029189,0.020210083614112726,0.020188837329731674,0.020346303490253948,0.020150188890379898,0.020128898396077562,0.020165245019960535,0.020144157356752734,0.019809359079918966,0.019724329268657168,0.018889203640350134,0.019019553587871708,0.019351604038758213,0.01930373244367719,0.01923091565584488,0.019295692914836616,0.019356406333746867,0.019354186379604243,0.018928377454922728,0.019027158726472912,0.018920183823713445,0.019080482740842307,0.019411349839915736,0.01955041920122932,0.019241601712136052,0.019134162018897463,0.019054970120735502,0.01898559934099292,0.01964633696800573,0.019733326664955968,0.019692492921535402,0.019650013794047485,0.019527014690996637,0.01951291316101217,0.019657271794013043,0.019525281160919016,0.019436755974485704,0.019421255759590875,0.019016839554172094,0.019049814097573798,0.019238286800614353,0.019257013202981718,0.01984315182744162,0.019899962364382844,0.019292913843472852,0.019281829689252197,0.01913283249180997,0.01896255064975253,0.019266275807660715,0.01921939247007672,0.019180040685579755,0.01918679559903992,0.019266176858845165,0.019219774792827847,0.019235842394748258,0.01920006112352862,0.01919475447876548,0.019164133268552885,0.019316283520740676,0.01874254152463608,0.01874010880569681,0.01897951966995113,0.01921950912415747,0.01972744778910026,0.019717759523343856,0.01972341404048568,0.01946128893777779,0.019188276414223476,0.01915960208446484,0.01905055674100814,0.018949278863371034,0.022647232886159087,0.01821522261584595,0.018043617718012554,0.01784310171752581,0.018489258271104054,0.018445527353541668,0.018362373125835257,0.018277041600245625,0.01812849212223322,0.018089801066317163,0.01785404649323572,0.017283186576007584,0.01711628039590032,0.017131396099758063,0.017196831261082894,0.017121186105487407,0.01720787833991485,0.017978511579261027,0.01805641823255747,0.018198941211180222,0.018135404805792916,0.018250449246559608,0.018352300058710205,0.0179368904909087,0.017944120995506647],"times":["01-30","01-30","01-30","01-30","01-30","01-30","01-31","01-31","01-31","01-31","01-31","01-31","01-31","01-31","01-31","01-31","01-31","01-31","01-31","01-31","01-31","01-31","01-31","01-31","01-31","01-31","01-31","01-31","01-31","01-31","02-01","02-01","02-01","02-01","02-01","02-01","02-01","02-01","02-01","02-01","02-01","02-01","02-01","02-01","02-01","02-01","02-01","02-01","02-01","02-01","02-01","02-01","02-01","02-01","02-02","02-02","02-02","02-02","02-02","02-02","02-02","02-02","02-02","02-02","02-02","02-02","02-02","02-02","02-02","02-02","02-02","02-02","02-02","02-02","02-02","02-02","02-02","02-02","02-02","02-03","02-03","02-03","02-03","02-03","02-03","02-03","02-03","02-03","02-03","02-03","02-03","02-03","02-03","02-03","02-03","02-03","02-03","02-03","02-03","02-03","02-03","02-03","02-03","02-04","02-04","02-04","02-04","02-04","02-04","02-04","02-04","02-04","02-04","02-04","02-04","02-04","02-04","02-04","02-04","02-04","02-04","02-04","02-04","02-04","02-04","02-04","02-04","02-05","02-05","02-05","02-05","02-05","02-05","02-05","02-05","02-05","02-05","02-05","02-05","02-05","02-05","02-05","02-05","02-05","02-05","02-05","02-05","02-05","02-05","02-05","02-05","02-06","02-06","02-06","02-06","02-06","02-06","02-06","02-06","02-06","02-06","02-06","02-06","02-06","02-06","02-06","02-06","02-06","02-06","02-06"],"from":"January 30, 2023","to":"February 06, 2023"}`
  // )
  const coinData = JSON.parse(
    `{"id":"fantom","name":"Fantom","symbol":"ftm","market_cap_rank":41,"asset_platform_id":"","image":{"thumb":"https://assets.coingecko.com/coins/images/4001/thumb/Fantom_round.png?1669652346","small":"https://assets.coingecko.com/coins/images/4001/small/Fantom_round.png?1669652346","large":"https://assets.coingecko.com/coins/images/4001/large/Fantom_round.png?1669652346"},"market_data":{"current_price":{"usd":0.566066},"market_cap":{"usd":1565786784},"price_change_percentage_1h_in_currency":{"usd":0.33425},"price_change_percentage_24h_in_currency":{"usd":0.74982},"price_change_percentage_7d_in_currency":{"usd":14.89607}}}`
  )
  let msg: Message
  beforeEach(() => (msg = mockdc.cloneMessage()))
  afterEach(() => jest.clearAllMocks())

  test("throw APIError", async () => {
    CacheManager.get = jest.fn().mockResolvedValueOnce({ ok: false })
    await expect(
      processor.composeTickerResponse({ msg, coinId: "fantom", symbol: "FTM" })
    ).rejects.toThrow(APIError)
  })

  test("compose successfully", async () => {
    CacheManager.get = jest.fn().mockResolvedValueOnce({
      ok: true,
      data: coinData,
    })
    jest
      .spyOn(processor, "renderHistoricalMarketChart")
      .mockResolvedValueOnce(null)
    const output = await processor.composeTickerResponse({
      msg,
      coinId: "fantom",
      symbol: "FTM",
    })
    const embed = output?.messageOptions?.embeds[0]
    expect(embed.author).toEqual({
      name: coinData.name,
      iconURL: coinData.image.small,
    })
    const expectedFields = [
      {
        name: "Market cap (USD)",
        value: `$1,565,786,784 (#41) ${blank}`,
        inline: true,
      },
      { name: "Price (USD)", value: "$0.5661", inline: true },
      { name: "\u200B", value: "\u200B", inline: true },
      { name: "Change (1h)", value: `${uptrend} +0.33%`, inline: true },
      {
        name: `Change (24h) ${blank}`,
        value: `${uptrend} +0.75%`,
        inline: true,
      },
      { name: "Change (7d)", value: `${uptrend} +14.9%`, inline: true },
    ]
    expect(embed.fields).toStrictEqual(expectedFields)
  })
})

describe("handleTickerViews", () => {
  let btnInteraction: ButtonInteraction
  beforeEach(() => (btnInteraction = mockdc.cloneButtonInteraction()))
  afterEach(() => jest.clearAllMocks())

  test("view ticker chart", async () => {
    btnInteraction.customId = "ticker_view_chart|"
    await processor.handleTickerViews(btnInteraction)
    expect(processor.composeTickerResponse).toHaveBeenCalledTimes(1)
  })

  test("view ticker info", async () => {
    btnInteraction.customId = "ticker_view_info|"
    await processor.handleTickerViews(btnInteraction)
    expect(processor.composeTokenInfoEmbed).toHaveBeenCalledTimes(1)
  })
})
